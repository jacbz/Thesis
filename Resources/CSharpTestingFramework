/*
C# TESTING FRAMEWORK

These classes and methods are loaded into the test engine before testing.
They provide essential methods to mimic the behavior of Excel's formula engine.
*/

// case-insensitive string compare
public static bool CIEquals(this String a, String b) {
    return a.Equals(b, StringComparison.CurrentCultureIgnoreCase);
}

public static bool IsNumeric(this object o) =>
		o is double || o is int || o is decimal || o is uint || o is ulong || o is short ||
		o is sbyte || o is long || o is float || o is byte || o is ushort;

// same as Object.Equals, but returns true for numbers of different types
public static bool Compare(dynamic a, dynamic b)
{
	if (IsNumeric(a) && IsNumeric(b))
	{
		return a == b;
	}
	return Object.Equals(a, b);
}

// Implementation of Excel's round function that supports negative digits
public static double Round(double value, double digits)
{
    if (digits >= 0)
    {
        return Math.Round(value, (int)digits, MidpointRounding.AwayFromZero);
    }
    else
    {
        digits = Math.Abs(digits);
        double temp = value / Math.Pow(10, digits);
        temp = Math.Round(temp, 0, MidpointRounding.AwayFromZero);
        return temp * Math.Pow(10, digits);
    }
}

public static double RoundUp(double value, double digits)
{
    var power = Math.Pow(10, digits);
    return Math.Ceiling(value * power) / power;
}

public static double RoundDown(double value, double digits)
{
   var power = Math.Pow(10, digits);
   return Math.Floor(value * power) / power;
}

public class Matrix
{
	public dynamic[,] Items { get; set; }

	public static Matrix Of()
	{
		Matrix matrix = new Matrix();
		matrix.Items = new dynamic[0, 0];
		return matrix;		
	}
	
	public static Matrix Of(params Row[] rows)
	{
		Matrix matrix = new Matrix();
		int rowCount = rows.Length;
		int columnCount = rows.Max(c => c.Items.Length);
		dynamic[,] items = new dynamic[rowCount, columnCount];

		for(int j = 0; j < rowCount; j++)
		{
			for(int k = 0; k < columnCount; k++)
			{
				items[j, k] = rows[j].Items.Length > k ? rows[j].Items[k] : new EmptyCell();
			}
		}
		matrix.Items = items;
		return matrix;
	}

	public static Matrix Of(params Column[] columns)
	{
		Matrix matrix = new Matrix();
		int rowCount = columns.Max(c => c.Items.Length);
		int columnCount = columns.Length;
		dynamic[,] items = new dynamic[rowCount, columnCount];

		for(int j = 0; j < rowCount; j++)
		{
			for(int k = 0; k < columnCount; k++)
			{
				items[j, k] = columns[k].Items.Length > j ? columns[k].Items[j] : new EmptyCell();
			}
		}
		matrix.Items = items;
		return matrix;
	}	

	public dynamic[] Flatten()
	{
		return Items.Cast<dynamic>().ToArray();
	}

	public double Sum() { return Flatten().Sum(); }
	public double Min() { return Flatten().Min(); }
	public double Max() { return Flatten().Max(); }
	public int Count() { return Flatten().Count(); }
	public double Average() { return Flatten().Average(); }
	
	public dynamic VLookUp(dynamic lookupValue, int column, dynamic matchMode = null)
	{
        try
        {
            if(matchMode == null || Object.Equals(matchMode, true) || Object.Equals(matchMode, 1))
            {
                // approximate match
                return Items[ApproximateMatchRowIndex(lookupValue, 0), column - 1];
            }
            if(Object.Equals(matchMode, false) || Object.Equals(matchMode, 0))
            {
                // exact match
                return Items[ExactMatchRowIndex(lookupValue, 0), column - 1];
            }
            throw new ArgumentException("Match mode has invalid value");
        }
        catch (Exception)
        {
            return new FormulaError("VLookUp failed");
        }
    }
	
	public dynamic HLookUp(dynamic lookupValue, int row, dynamic matchMode = null)
	{
        try
        {
            if(matchMode == null || Object.Equals(matchMode, true) || Object.Equals(matchMode, 1))
            {
                // approximate match
                return Items[row - 1, ApproximateMatchColumnIndex(lookupValue, 0)];
            }
            if(Object.Equals(matchMode, false) || Object.Equals(matchMode, 0))
            {
                // exact match
                return Items[row - 1, ExactMatchColumnIndex(lookupValue, 0)];
            }
            throw new ArgumentException("Match mode has invalid value");
        }
        catch (Exception)
        {
            return new FormulaError("VLookUp failed");
        }
	}

	public int ExactMatchRowIndex(dynamic value, int column)
	{
		if(IsNumeric(value))
		{
			decimal valueNum = Convert.ToDecimal(value);
			for(int i = 0; i < Items.GetLength(0); i++)
			{
				dynamic curr = Items[i, column];
				if (IsNumeric(curr) && Convert.ToDecimal(curr) == valueNum)
					return i;
			}
		}
		else if (value is string valueString)
		{
			for(int i = 0; i < Items.GetLength(0); i++)
			{
				dynamic curr = Items[i, column];
				if (curr is string currString && currString == valueString)
					return i;
			}
		}
		return -1;
	}

	public int ExactMatchColumnIndex(dynamic value, int row)
	{
		if(IsNumeric(value))
		{
			decimal valueNum = Convert.ToDecimal(value);
			for(int i = 0; i < Items.GetLength(1); i++)
			{
				dynamic curr = Items[row, i];
				if (IsNumeric(curr) && Convert.ToDecimal(curr) == valueNum)
					return i;
			}
		}
		else if (value is string valueString)
		{
			for(int i = 0; i < Items.GetLength(1); i++)
			{
				dynamic curr = Items[row, i];
				if (curr is string currString && currString == valueString)
					return i;
			}
		}
		return -1;
	}

	public int ApproximateMatchRowIndex(dynamic value, int column)
	{
		if(IsNumeric(value))
		{
			decimal valueNum = Convert.ToDecimal(value);
			for(int i = 0; i < Items.GetLength(0); i++)
			{
				dynamic curr = Items[i, column];
				if (!IsNumeric(Items[i,column]) && !(curr is EmptyCell))
					return -1;
				decimal currNum = Convert.ToDecimal(curr);
				if (currNum == valueNum)
					return i;
				if (currNum > valueNum)
					return i - 1;
			}
		}
		else if (value is string valueString)
		{
			for(int i = 0; i < Items.GetLength(0); i++)
			{
				dynamic curr = Items[i, column];
				if (curr is string currString)
				{
					int compare = valueString.CompareTo(currString);
					if (compare == 0)
						return i;
					if (compare == -1)
						return i - 1;
				}
			}
		}
		return -1;
	}

	public int ApproximateMatchColumnIndex(dynamic value, int row)
	{
		if(IsNumeric(value))
		{
			decimal valueNum = Convert.ToDecimal(value);
			for(int i = 0; i < Items.GetLength(1); i++)
			{
				dynamic curr = Items[row, i];
				if (!IsNumeric(curr) && !(curr is EmptyCell))
					return -1;
				decimal currNum = Convert.ToDecimal(curr);
				if (currNum == valueNum)
					return i;
				if (currNum > valueNum)
					return i - 1;
			}
		}
		else if (value is string valueString)
		{
			for(int i = 0; i < Items.GetLength(1); i++)
			{
				dynamic curr = Items[row, i];
				if (curr is string currString)
				{
					int compare = valueString.CompareTo(currString);
					if (compare == 0)
						return i;
					if (compare == -1)
						return i - 1;
				}
			}
		}
		return -1;
	}

	public dynamic this[int row, int column]
	{
		get => Items.GetLength(0) < row && Items.GetLength(1) < column
               ? new FormulaError("Index out of range")
		        : Items [row - 1, column - 1];
	}
}

public class Row : Collection
{
	public static Row Of(params dynamic[] items)
	{
		Row row = new Row();
		row.Items = items;
		return row;
	}

	public dynamic this[int row, int column]
	{
		get
		{
			if (row != 1)
                return new FormulaError("Row number must be 1");
			return Items.Length < column ? new FormulaError("Column number out of range") : Items[column - 1];
		}
	}
}

public class Column : Collection
{	
	public static Column Of(params dynamic[] items)
	{
		Column column = new Column();
		column.Items = items;
		return column;
	}	

	public dynamic this[int row, int column]
	{
		get
		{
			if (column != 1) throw new IndexOutOfRangeException("Column number must be 1");
            return Items.Length < row ? new FormulaError("Row number out of range") : Items[row - 1];
        }
	}
}

public class Collection
{
	public dynamic[] Items { get; set; }

	protected Collection()
	{
		Items = new object[0];
	}

	// flatten on arrival
	public static Collection Of(params dynamic[] items)
	{
		Collection collection = new Collection();
		if (items == null) return collection;

		var flattenedItems = new List<dynamic>();
		foreach(dynamic obj in items)
		{
			if (obj == null) continue;
			if (obj is Collection ic)
				flattenedItems.AddRange(ic.Items);
			else
				flattenedItems.Add(obj);
		}
		collection.Items = flattenedItems.ToArray();
		return collection;
	}

	public double Sum() { return Items.Sum(); }
	public double Min() { return Items.Min(); }
	public double Max() { return Items.Max(); }	
	public int Count() { return Items.Count(); }
	public double Average() { return Items.Average(); }	

	public dynamic Match(dynamic lookupValue, int matchType = 1)
	{
		for(int i = 0; i < Items.Length; i++)
		{
			dynamic curr = Items[i];
			if (Compare(lookupValue, curr)) // exact match
				return i + 1;
			
			if(IsNumeric(lookupValue) && IsNumeric(curr))
			{
				decimal valueNum = Convert.ToDecimal(lookupValue);
				decimal currNum = Convert.ToDecimal(curr);
				if (currNum > valueNum && matchType != 0)
					return matchType == 1 ? i : i + 1;
			}
			else if (IsNumeric(lookupValue) && !IsNumeric(curr))
			{
				if (matchType == 1)
					return i;
				if (matchType == -1)
					return new FormulaError("Can not use match type -1 when list is of mixed type");
			}
			else if (lookupValue is string valueString && curr is string currString && matchType != 0)
			{
				int compare = currString.CompareTo(valueString);
				if(compare == 1)
					return matchType == 1 ? i : i + 1;				
			}
		}
		return new FormulaError("Error in Match");
	}

	public dynamic this[int index]
	{
		get => Items.Length < index ? new FormulaError("Index out of range") : Items[index - 1];
	}
}

// sum all number of values, ignore logical values
public static double Sum(this dynamic[] items)
{
	double result = 0;
	foreach(dynamic obj in items)
	{
		if(obj is Matrix m)
			result += m.Sum();
		else if(IsNumeric(obj))
			result += Convert.ToDouble(obj);
		else if (obj is string s)
		{
			if(s.Contains("%") && !s.Any(char.IsLetter))
				s = s.Replace("%","");
			if(double.TryParse(s, out var parsedNumber))
				result += parsedNumber;
		}
	}
	return result;
}

// Calculates the minimum. Ignores everything except numbers and strings
public static double Min(this dynamic[] items)
{
	var min = Double.MaxValue;
	foreach(dynamic obj in items)
	{
		if(obj is Matrix m)
			min = Math.Min(min, m.Min());
		else if(IsNumeric(obj))
			min = Math.Min(min, Convert.ToDouble(obj));
		else if (obj is string s)
		{
			if(s.Contains("%") && !s.Any(char.IsLetter))
				s = s.Replace("%","");
			if(double.TryParse(s, out var parsedNumber))
				min = Math.Min(min, parsedNumber);
		}
	}
	// if no valid arguments were provided, return 0
	return min == Double.MaxValue ? 0 : min;
}

// Calculates the maximum. Ignores everything except numbers and strings
public static double Max(this dynamic[] items)
{
	var max = Double.MinValue;
	foreach(dynamic obj in items)
	{
		if(obj is Matrix m)
			max = Math.Max(max, m.Max());
		else if(IsNumeric(obj))
			max = Math.Max(max, Convert.ToDouble(obj));
		else if (obj is string s)
		{
			if(s.Contains("%") && !s.Any(char.IsLetter))
				s = s.Replace("%","");
			if(double.TryParse(s, out var parsedNumber))
				max = Math.Max(max, parsedNumber);
		}
	}
	// if no valid arguments were provided, return 0
	return max == Double.MinValue ? 0 : max;
}

// count the number of items that contain numbers or text representation of numbers (e.g. "5", "20%")
// https://support.office.com/en-us/article/count-function-a59cd7fc-b623-4d93-87a4-d23bf411294c
public static int Count(this dynamic[] items)
{
	int count = 0;
	foreach(var item in items)
	{
		if(item is Collection c)
		{
			count += c.Count();
		}
		else if(item is Matrix m)
		{
			count += m.Count();
		}
		else if(IsNumeric(item))
		{
			count++;
		}
		else if(item is string s)
		{
			if(s.Contains("%") && !s.Any(char.IsLetter))
				s = s.Replace("%","");
			if(double.TryParse(s, out var parsedNumber))
			{
				count++;
				continue;
			}
		}
	}
	return count;
}

// https://support.office.com/en-us/article/average-function-047bac88-d466-426c-a32b-8f33eb960cf6
public static double Average(this dynamic[] items)
{
	return items.Sum() / items.Count();
}

// mimics the behavior of an empty cell in Excel
public struct EmptyCell
{
    public static dynamic operator +(dynamic a, EmptyCell b) { return a; }
    public static dynamic operator +(EmptyCell a, dynamic b) { return b; }
    public static EmptyCell operator +(EmptyCell a, EmptyCell b) { return a; }
	public static dynamic operator -(dynamic a, EmptyCell b) { return a; }
    public static dynamic operator -(EmptyCell a, dynamic b) { return 0 - b; }
    public static double operator -(EmptyCell a, EmptyCell b) { return 0; }
    public static dynamic operator *(dynamic a, EmptyCell b) { return 0; }
    public static dynamic operator *(EmptyCell a, dynamic b) { return 0; }
    public static double operator *(EmptyCell a, EmptyCell b) { return 0; }
    public static dynamic operator /(dynamic a, EmptyCell b) { return new FormulaError("Division by zero"); }
    public static dynamic operator /(EmptyCell a, dynamic b) { return 0 * b; }
    public static dynamic operator /(EmptyCell a, EmptyCell b) { return new FormulaError("Division by zero"); }
    public static dynamic operator %(dynamic a, EmptyCell b) { return new FormulaError("Division by zero"); }
    public static dynamic operator %(EmptyCell a, dynamic b) { return 0 % b; }
    public static dynamic operator %(EmptyCell a, EmptyCell b) { return new FormulaError("Division by zero"); }
    public static bool operator ==(dynamic a, EmptyCell empty) { return empty.Equals(a); }
    public static bool operator ==(EmptyCell a, dynamic b) { return a.Equals(b); }
    public static bool operator ==(EmptyCell a, EmptyCell b) { return true; }
    public static bool operator !=(dynamic a, EmptyCell b) { return !(a == b); }
    public static bool operator !=(EmptyCell a, dynamic b) { return !(b == a); }
    public static bool operator !=(EmptyCell a, EmptyCell b) { return false; }
    public static bool operator <(dynamic a, EmptyCell b) { return a < 0; }
    public static bool operator <(EmptyCell a, dynamic b) { return 0 < b; }
    public static bool operator <(EmptyCell a, EmptyCell b) { return false; }
    public static bool operator >(dynamic a, EmptyCell b) { return a > 0; }
    public static bool operator >(EmptyCell a, dynamic b) { return 0 > b; }
    public static bool operator >(EmptyCell a, EmptyCell b) { return false; }
    public static bool operator <=(dynamic a, EmptyCell b) { return a <= 0; }
    public static bool operator <=(EmptyCell a, dynamic b) { return 0 <= b; }
    public static bool operator <=(EmptyCell a, EmptyCell b) { return true; }
    public static bool operator >=(dynamic a, EmptyCell b) { return a >= 0; }
    public static bool operator >=(EmptyCell a, dynamic b) { return 0 >= b; }
    public static bool operator >=(EmptyCell a, EmptyCell b) { return true; }
    public static dynamic operator !(EmptyCell a) { return true; }

    public static implicit operator double(EmptyCell a) => 0;
    public static implicit operator string(EmptyCell a) => "";
    public static implicit operator bool(EmptyCell a) => false;

    public override bool Equals(dynamic a)
	{ 
		if (a is EmptyCell) return true;
		if (IsNumeric(a)) return a == 0;
        switch (a)
        {
            case string s:
                return s == "";
            case bool b:
                return b == false;
            default:
                return false;
        }
	}
    public override int GetHashCode() { return 0; }
}

public class FormulaError
{
	public string Message { get; }
	public FormulaError(string message)
	{
		Message = message;
	}
}